int isvalid(vector<vector<int>>&grid,int i,int j)
{
    int m=grid.size();
    int n=grid[0].size();
    
    if(i<0 ||j<0 ||i>=m || j>=n )return 0;
    if(grid[i][j]!=1)
        return 0;
    return 1;
    
    
    
}

int dx[4]={0,1,-1,0};
int dy[4]={1,0,0,-1};









class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        
        int total=0,rotten=0,dist=0;
        
        int i,j;        queue<pair<int,int>>q;
        
        int m=grid.size();
        int n=grid[0].size();
        
        for(i=0;i<m;i++)
        {
            for(j=0;j<n;j++)
            {
                if(grid[i][j]!=0)total++;
                if(grid[i][j]==2)
                    
                {
                    rotten++;
                
                q.push({i,j});
                }
                
            }
        }
        
        
        if(rotten==total)return 0;
       if(rotten==0)return -1;
        
dist=0;
        rotten=0;
        
        while(q.empty()==0)
        {
         
            
            int size=q.size();
            rotten=rotten+size; 
            if(rotten==total)return dist;dist++;
           
            while(size--)
            {
                
                
                 
            int tx=q.front().first;
            int ty=q.front().second;
            q.pop();
                for(int k=0;k<4;k++)
                { int  newx=tx+dx[k];
                 int newy=ty+dy[k];
                 
                    
                    if(isvalid(grid,newx,newy))
                    {
                       
                        grid[newx][newy]=2;
                        q.push({newx,newy});
                        
                    }
                    
                }
                
                
            }
            
            
           
            
            
            
        }
       return -1;
        
        
        
    }
};
