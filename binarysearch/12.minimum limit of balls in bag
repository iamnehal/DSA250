class Solution {
public:
    
    int isvalid(vector<int>&a,int mid,int d)
    { 
        int count=0;
        for(int i=0;i<a.size();i++)
        {
            
  if(a[i]>mid)
  {
      
     /* if(a[i]<=2*mid)
          count++;
      else
      {
          double l=a[i];
          
          count+=ceil(l/mid);
      }
      */
      
      if(a[i]%mid==0)count+=a[i]/mid-1;
      else
          count+=a[i]/mid;
      
      
      
  }  
            
        }
        
        if(count>d)return 0;
        return 1;
        
    }
    
    
    int minimumSize(vector<int>& a, int k) {
        int n=a.size();
        int i;
        int low=1;
        int maxe=0;
        for(i=0;i<n;i++)
            maxe=max(maxe,a[i]);
        int possible=0;
        int high=maxe;
   
        while(low<=high)
        { int mid=(low + (high-low)/2);
            if(isvalid(a,mid,k))
            {
                
                possible=mid;
                high=mid-1;
                
            }
            else
            {
                low=mid+1;
                
            }
            
            
        }
        return possible;
        
        
    }
};
