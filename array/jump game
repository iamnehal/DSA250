int Solution::canJump(vector<int> &A) {

int n=A.size();
if(n==1)return 1;
int target=n-1;
for(int i=n-2;i>=0;i--)
{

if(A[i]+i>=target)
{
    target=i;

}


}


if(target==0)return 1;
return 0;







}



*******************

class Solution {
public:
    bool canJump(vector<int>& nums) {
        
        
        int n=nums.size();
        bool dp[nums.size()];
        
        dp[0]=1;
        
        for(int i=1;i<nums.size();i++)
        {
            dp[i]=0;
            for(int j=0;j<i;j++)
            {
                if(nums[j]+j>=i)
                {
                    dp[i]=dp[i]||dp[j];
                }
            
            if(dp[i])break;
            }
            
            
            
            
        }
        return dp[n-1];
        
        
    }
};
